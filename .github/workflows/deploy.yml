name: üöÄ Deploy to Production

# Executa apenas quando h√° push para main ap√≥s merge de PR
on:
  push:
    branches: [ main ]
    # Opcionalmente, pode executar apenas quando h√° tags de release
    # tags: [ 'v*' ]

# Permiss√µes necess√°rias para deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Garante que apenas um deployment execute por vez
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de build para produ√ß√£o
  build-production:
    name: üèóÔ∏è Build for Production
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout do c√≥digo
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      # 2. Setup do Node.js
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      # 3. Instalar depend√™ncias
      - name: üì¶ Install dependencies
        run: npm ci --production=false
      
      # 4. Executar testes finais
      - name: üß™ Run final tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
          NODE_ENV: production
      
      # 5. Build otimizado para produ√ß√£o
      - name: üèóÔ∏è Build for production
        run: |
          echo "üî® Building Air Quality Checker for production..."
          
          # Se houver script de build, executa
          if grep -q "\"build\":" package.json; then
            npm run build
            echo "‚úÖ Production build completed"
          else
            # Para aplica√ß√µes est√°ticas, organiza os arquivos
            mkdir -p dist
            cp -r *.html *.css *.js dist/ 2>/dev/null || true
            [ -d "assets" ] && cp -r assets dist/ || true
            [ -d "images" ] && cp -r images dist/ || true
            [ -d "styles" ] && cp -r styles dist/ || true
            [ -d "scripts" ] && cp -r scripts dist/ || true
            echo "üìÅ Static files organized for deployment"
          fi
      
      # 6. Otimizar arquivos est√°ticos
      - name: ‚ö° Optimize static assets
        run: |
          echo "‚ö° Optimizing static assets..."
          
          # Minificar CSS se existir
          for css_file in $(find . -name "*.css" -not -path "./node_modules/*" -not -path "./dist/*"); do
            echo "  üé® Processing CSS: $css_file"
          done
          
          # Verificar tamanho dos arquivos
          echo "üìä File sizes:"
          find . -name "*.html" -o -name "*.css" -o -name "*.js" | grep -v node_modules | xargs ls -lh
          
          echo "‚úÖ Asset optimization completed"
      
      # 7. Preparar artefatos para deployment
      - name: üì¶ Prepare deployment artifacts
        run: |
          echo "üì¶ Preparing deployment artifacts..."
          
          # Criar estrutura de deployment
          if [ -d "dist" ]; then
            echo "üìÅ Using build output from dist/"
            deployment_dir="dist"
          else
            echo "üìÅ Using root directory for static files"
            deployment_dir="."
          fi
          
          # Listar arquivos que ser√£o deployados
          echo "üìÑ Files to be deployed:"
          if [ "$deployment_dir" = "." ]; then
            ls -la *.html *.css *.js 2>/dev/null || echo "No static files found"
          else
            ls -la $deployment_dir/
          fi
      
      # 8. Upload dos artefatos de build
      - name: üì§ Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            dist/
            *.html
            *.css  
            *.js
            assets/
            images/
          retention-days: 90

  # Job de deployment (simulado para GitHub Pages)
  deploy-pages:
    name: üåê Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-production
    
    steps:
      # 1. Download dos artefatos
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
      
      # 2. Setup do GitHub Pages
      - name: üîß Setup GitHub Pages
        uses: actions/configure-pages@v3
      
      # 3. Upload para GitHub Pages
      - name: üì§ Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'
      
      # 4. Deploy para GitHub Pages  
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Job de notifica√ß√£o de deployment
  notify-deployment:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [build-production, deploy-pages]
    if: always()
    
    steps:
      - name: üì¢ Deployment notification
        run: |
          echo "üå¨Ô∏è Air Quality Checker Deployment Status"
          echo "========================================"
          
          if [ "${{ needs.build-production.result }}" = "success" ] && [ "${{ needs.deploy-pages.result }}" = "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
            echo "üåê Application is now live and accessible to users"
            echo "üìä All tests passed and build completed successfully"
            echo "üöÄ Air Quality Checker is ready for production use!"
          else
            echo "‚ùå DEPLOYMENT FAILED!"
            echo "üîç Please check the logs for details"
          fi
          
          echo "========================================"
          echo "üì± Features deployed:"
          echo "  üåç City/state air quality lookup"
          echo "  üìä Real-time AQI with color indicators"
          echo "  üè• Health recommendations"
          echo "  üì± Mobile-responsive interface"
          echo "  ‚ö†Ô∏è  Comprehensive error handling"
          echo "  üß™ Fully tested codebase"

  # Job para criar release notes (opcional)
  create-release:
    name: üìù Create Release
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: success() && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üìù Generate release notes
        run: |
          echo "üìù Generating release notes..."
          
          # Criar release notes baseado nos commits
          echo "## üå¨Ô∏è Air Quality Checker Release" > release_notes.md
          echo "" >> release_notes.md
          echo "### ‚ú® Features:" >> release_notes.md
          echo "- üåç Air quality lookup by city and state" >> release_notes.md
          echo "- üìä Real-time AQI display with color-coded indicators" >> release_notes.md  
          echo "- üè• Health recommendations based on air quality levels" >> release_notes.md
          echo "- üì± Responsive design for all devices" >> release_notes.md
          echo "- ‚ö†Ô∏è Robust error handling and validation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üîß Technical:" >> release_notes.md
          echo "- ‚úÖ Comprehensive test suite with high coverage" >> release_notes.md
          echo "- üîÑ CI/CD pipeline with automated testing" >> release_notes.md
          echo "- üöÄ Optimized for production deployment" >> release_notes.md
          echo "- üåê Integration with real-world APIs (Nominatim & Open-Meteo)" >> release_notes.md
          
          cat release_notes.md
      
      - name: üè∑Ô∏è Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Air Quality Checker ${context.ref.replace('refs/tags/', '')}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
